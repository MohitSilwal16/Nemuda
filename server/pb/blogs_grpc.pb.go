// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: proto/blogs.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BlogsService_GetBlogsByTagWithPagination_FullMethodName = "/proto.BlogsService/GetBlogsByTagWithPagination"
	BlogsService_PostBlog_FullMethodName                    = "/proto.BlogsService/PostBlog"
	BlogsService_UpdateBlog_FullMethodName                  = "/proto.BlogsService/UpdateBlog"
	BlogsService_DeleteBlog_FullMethodName                  = "/proto.BlogsService/DeleteBlog"
	BlogsService_GetBlogByTitle_FullMethodName              = "/proto.BlogsService/GetBlogByTitle"
	BlogsService_LikeBlog_FullMethodName                    = "/proto.BlogsService/LikeBlog"
	BlogsService_DislikeBlog_FullMethodName                 = "/proto.BlogsService/DislikeBlog"
	BlogsService_AddComment_FullMethodName                  = "/proto.BlogsService/AddComment"
	BlogsService_SearchBlogByTitle_FullMethodName           = "/proto.BlogsService/SearchBlogByTitle"
)

// BlogsServiceClient is the client API for BlogsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogsServiceClient interface {
	// CRUD Operations on Blogs
	GetBlogsByTagWithPagination(ctx context.Context, in *GetBlogsRequest, opts ...grpc.CallOption) (*GetBlogsResponse, error)
	PostBlog(ctx context.Context, in *PostBlogRequest, opts ...grpc.CallOption) (*PostBlogResponse, error)
	UpdateBlog(ctx context.Context, in *UpdateBlogRequest, opts ...grpc.CallOption) (*UpdateBlogResponse, error)
	DeleteBlog(ctx context.Context, in *DeleteBlogRequest, opts ...grpc.CallOption) (*DeleteBlogResponse, error)
	// Other Operations on Blogs
	GetBlogByTitle(ctx context.Context, in *GetBlogRequest, opts ...grpc.CallOption) (*GetBlogResponse, error)
	LikeBlog(ctx context.Context, in *LikeBlogRequest, opts ...grpc.CallOption) (*LikeBlogResponse, error)
	DislikeBlog(ctx context.Context, in *DislikeBlogRequest, opts ...grpc.CallOption) (*DislikeBlogResponse, error)
	AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error)
	SearchBlogByTitle(ctx context.Context, in *SearchBlogRequest, opts ...grpc.CallOption) (*SearchBlogResponse, error)
}

type blogsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogsServiceClient(cc grpc.ClientConnInterface) BlogsServiceClient {
	return &blogsServiceClient{cc}
}

func (c *blogsServiceClient) GetBlogsByTagWithPagination(ctx context.Context, in *GetBlogsRequest, opts ...grpc.CallOption) (*GetBlogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlogsResponse)
	err := c.cc.Invoke(ctx, BlogsService_GetBlogsByTagWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsServiceClient) PostBlog(ctx context.Context, in *PostBlogRequest, opts ...grpc.CallOption) (*PostBlogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostBlogResponse)
	err := c.cc.Invoke(ctx, BlogsService_PostBlog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsServiceClient) UpdateBlog(ctx context.Context, in *UpdateBlogRequest, opts ...grpc.CallOption) (*UpdateBlogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBlogResponse)
	err := c.cc.Invoke(ctx, BlogsService_UpdateBlog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsServiceClient) DeleteBlog(ctx context.Context, in *DeleteBlogRequest, opts ...grpc.CallOption) (*DeleteBlogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBlogResponse)
	err := c.cc.Invoke(ctx, BlogsService_DeleteBlog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsServiceClient) GetBlogByTitle(ctx context.Context, in *GetBlogRequest, opts ...grpc.CallOption) (*GetBlogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlogResponse)
	err := c.cc.Invoke(ctx, BlogsService_GetBlogByTitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsServiceClient) LikeBlog(ctx context.Context, in *LikeBlogRequest, opts ...grpc.CallOption) (*LikeBlogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeBlogResponse)
	err := c.cc.Invoke(ctx, BlogsService_LikeBlog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsServiceClient) DislikeBlog(ctx context.Context, in *DislikeBlogRequest, opts ...grpc.CallOption) (*DislikeBlogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DislikeBlogResponse)
	err := c.cc.Invoke(ctx, BlogsService_DislikeBlog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsServiceClient) AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCommentResponse)
	err := c.cc.Invoke(ctx, BlogsService_AddComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsServiceClient) SearchBlogByTitle(ctx context.Context, in *SearchBlogRequest, opts ...grpc.CallOption) (*SearchBlogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchBlogResponse)
	err := c.cc.Invoke(ctx, BlogsService_SearchBlogByTitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogsServiceServer is the server API for BlogsService service.
// All implementations must embed UnimplementedBlogsServiceServer
// for forward compatibility
type BlogsServiceServer interface {
	// CRUD Operations on Blogs
	GetBlogsByTagWithPagination(context.Context, *GetBlogsRequest) (*GetBlogsResponse, error)
	PostBlog(context.Context, *PostBlogRequest) (*PostBlogResponse, error)
	UpdateBlog(context.Context, *UpdateBlogRequest) (*UpdateBlogResponse, error)
	DeleteBlog(context.Context, *DeleteBlogRequest) (*DeleteBlogResponse, error)
	// Other Operations on Blogs
	GetBlogByTitle(context.Context, *GetBlogRequest) (*GetBlogResponse, error)
	LikeBlog(context.Context, *LikeBlogRequest) (*LikeBlogResponse, error)
	DislikeBlog(context.Context, *DislikeBlogRequest) (*DislikeBlogResponse, error)
	AddComment(context.Context, *AddCommentRequest) (*AddCommentResponse, error)
	SearchBlogByTitle(context.Context, *SearchBlogRequest) (*SearchBlogResponse, error)
	mustEmbedUnimplementedBlogsServiceServer()
}

// UnimplementedBlogsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlogsServiceServer struct {
}

func (UnimplementedBlogsServiceServer) GetBlogsByTagWithPagination(context.Context, *GetBlogsRequest) (*GetBlogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlogsByTagWithPagination not implemented")
}
func (UnimplementedBlogsServiceServer) PostBlog(context.Context, *PostBlogRequest) (*PostBlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostBlog not implemented")
}
func (UnimplementedBlogsServiceServer) UpdateBlog(context.Context, *UpdateBlogRequest) (*UpdateBlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlog not implemented")
}
func (UnimplementedBlogsServiceServer) DeleteBlog(context.Context, *DeleteBlogRequest) (*DeleteBlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlog not implemented")
}
func (UnimplementedBlogsServiceServer) GetBlogByTitle(context.Context, *GetBlogRequest) (*GetBlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlogByTitle not implemented")
}
func (UnimplementedBlogsServiceServer) LikeBlog(context.Context, *LikeBlogRequest) (*LikeBlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeBlog not implemented")
}
func (UnimplementedBlogsServiceServer) DislikeBlog(context.Context, *DislikeBlogRequest) (*DislikeBlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DislikeBlog not implemented")
}
func (UnimplementedBlogsServiceServer) AddComment(context.Context, *AddCommentRequest) (*AddCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (UnimplementedBlogsServiceServer) SearchBlogByTitle(context.Context, *SearchBlogRequest) (*SearchBlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBlogByTitle not implemented")
}
func (UnimplementedBlogsServiceServer) mustEmbedUnimplementedBlogsServiceServer() {}

// UnsafeBlogsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogsServiceServer will
// result in compilation errors.
type UnsafeBlogsServiceServer interface {
	mustEmbedUnimplementedBlogsServiceServer()
}

func RegisterBlogsServiceServer(s grpc.ServiceRegistrar, srv BlogsServiceServer) {
	s.RegisterService(&BlogsService_ServiceDesc, srv)
}

func _BlogsService_GetBlogsByTagWithPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServiceServer).GetBlogsByTagWithPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogsService_GetBlogsByTagWithPagination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServiceServer).GetBlogsByTagWithPagination(ctx, req.(*GetBlogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogsService_PostBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServiceServer).PostBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogsService_PostBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServiceServer).PostBlog(ctx, req.(*PostBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogsService_UpdateBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServiceServer).UpdateBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogsService_UpdateBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServiceServer).UpdateBlog(ctx, req.(*UpdateBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogsService_DeleteBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServiceServer).DeleteBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogsService_DeleteBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServiceServer).DeleteBlog(ctx, req.(*DeleteBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogsService_GetBlogByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServiceServer).GetBlogByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogsService_GetBlogByTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServiceServer).GetBlogByTitle(ctx, req.(*GetBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogsService_LikeBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServiceServer).LikeBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogsService_LikeBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServiceServer).LikeBlog(ctx, req.(*LikeBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogsService_DislikeBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DislikeBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServiceServer).DislikeBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogsService_DislikeBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServiceServer).DislikeBlog(ctx, req.(*DislikeBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogsService_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServiceServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogsService_AddComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServiceServer).AddComment(ctx, req.(*AddCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogsService_SearchBlogByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServiceServer).SearchBlogByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogsService_SearchBlogByTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServiceServer).SearchBlogByTitle(ctx, req.(*SearchBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlogsService_ServiceDesc is the grpc.ServiceDesc for BlogsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlogsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BlogsService",
	HandlerType: (*BlogsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlogsByTagWithPagination",
			Handler:    _BlogsService_GetBlogsByTagWithPagination_Handler,
		},
		{
			MethodName: "PostBlog",
			Handler:    _BlogsService_PostBlog_Handler,
		},
		{
			MethodName: "UpdateBlog",
			Handler:    _BlogsService_UpdateBlog_Handler,
		},
		{
			MethodName: "DeleteBlog",
			Handler:    _BlogsService_DeleteBlog_Handler,
		},
		{
			MethodName: "GetBlogByTitle",
			Handler:    _BlogsService_GetBlogByTitle_Handler,
		},
		{
			MethodName: "LikeBlog",
			Handler:    _BlogsService_LikeBlog_Handler,
		},
		{
			MethodName: "DislikeBlog",
			Handler:    _BlogsService_DislikeBlog_Handler,
		},
		{
			MethodName: "AddComment",
			Handler:    _BlogsService_AddComment_Handler,
		},
		{
			MethodName: "SearchBlogByTitle",
			Handler:    _BlogsService_SearchBlogByTitle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/blogs.proto",
}
